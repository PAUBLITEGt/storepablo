import logging
import sqlite3
import secrets
import pytz
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

TOKEN = "8109961796:AAEgs3rB9myYm0slavf2fqp_QrTpHAklgWM"
ADMIN_ID = 7590578210
CONTACT_ADMIN_USERNAME = "@NigerianStore"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE,
            is_admin BOOLEAN DEFAULT FALSE
        )""")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS keys (
            id INTEGER PRIMARY KEY,
            key_code TEXT UNIQUE,
            platform TEXT,
            used BOOLEAN DEFAULT FALSE,
            generated_by INTEGER,
            FOREIGN KEY (generated_by) REFERENCES users(id)
        )""")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS accounts (
            id INTEGER PRIMARY KEY,
            platform TEXT,
            email TEXT,
            password TEXT,
            available BOOLEAN DEFAULT TRUE
        )""")
    conn.commit()
    conn.close()

def get_db_connection():
    return sqlite3.connect("bot_database.db")

def is_admin(telegram_id: int) -> bool:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE telegram_id = ?", (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else False

def add_admin_to_db(admin_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (telegram_id, is_admin) VALUES (?, ?) "
        "ON CONFLICT(telegram_id) DO UPDATE SET is_admin=excluded.is_admin",
        (admin_id, True),
    )
    conn.commit()
    conn.close()

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("No tienes permisos de administrador.")
        return
    await update.message.reply_text(
        "‚öôÔ∏è *Panel de Administraci√≥n*\n\n"
        "`/upload_account <plataforma> <correo> <contrase√±a>`\n"
        "`/generate_key <plataforma>`\n"
        "`/view_keys`\n"
        "`/view_stock`",
        parse_mode="Markdown"
    )

async def upload_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("No tienes permisos de administrador.")
        return
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("Uso: `/upload_account plataforma correo contrase√±a`", parse_mode="Markdown")
        return
    platform, email, password = args
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO accounts (platform, email, password, available) VALUES (?, ?, ?, ?)", (platform, email, password, True))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"‚úÖ Cuenta de {platform} agregada correctamente.")

async def generate_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("No tienes permisos de administrador.")
        return
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("Uso: `/generate_key plataforma`", parse_mode="Markdown")
        return
    platform = args[0]
    key_code = secrets.token_urlsafe(16)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, is_admin) VALUES (?, ?)", (update.effective_user.id, True))
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (update.effective_user.id,))
    admin_db_id = cursor.fetchone()[0]
    cursor.execute("INSERT INTO keys (key_code, platform, used, generated_by) VALUES (?, ?, ?, ?)", (key_code, platform, False, admin_db_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"üîë Clave generada: `{key_code}`", parse_mode="Markdown")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Bienvenido. Env√≠a tu *clave* para recibir una cuenta.\n"
        f"Compra claves contactando a {CONTACT_ADMIN_USERNAME}.",
        parse_mode="Markdown"
    )

async def process_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key_code = update.message.text.strip()
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, platform, used FROM keys WHERE key_code = ?", (key_code,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("‚ùå Clave inv√°lida.")
        return
    if row[2]:
        await update.message.reply_text("‚ö†Ô∏è Esta clave ya fue usada.")
        return
    key_id, platform = row[0], row[1]
    cursor.execute("SELECT id, email, password FROM accounts WHERE platform = ? AND available = TRUE LIMIT 1", (platform,))
    account = cursor.fetchone()
    if not account:
        await update.message.reply_text("‚ùå No hay cuentas disponibles por ahora.")
        return
    acc_id, email, password = account
    cursor.execute("UPDATE keys SET used = TRUE WHERE id = ?", (key_id,))
    cursor.execute("UPDATE accounts SET available = FALSE WHERE id = ?", (acc_id,))
    cursor.execute("DELETE FROM keys WHERE id = ?", (key_id,))
    conn.commit()
    conn.close()
    await update.message.reply_text(
        f"üéâ Aqu√≠ tienes tu cuenta de {platform.capitalize()}:\n\n"
        f"üìß *Correo:* `{email}`\nüîë *Contrase√±a:* `{password}`\n\n"
        f"Clave eliminada. Si necesitas otra, contacta a {CONTACT_ADMIN_USERNAME}.",
        parse_mode="Markdown"
    )

def main():
    init_db()
    add_admin_to_db(ADMIN_ID)
    timezone = pytz.timezone("UTC")  # <- soluci√≥n al error de timezone
    application = Application.builder().token(TOKEN).timezone(timezone).build()
    application.add_handler(CommandHandler("admin_panel", admin_panel, filters.User(ADMIN_ID)))
    application.add_handler(CommandHandler("upload_account", upload_account, filters.User(ADMIN_ID)))
    application.add_handler(CommandHandler("generate_key", generate_key, filters.User(ADMIN_ID)))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_key))
    application.run_polling()

if __name__ == "__main__":
    main()
